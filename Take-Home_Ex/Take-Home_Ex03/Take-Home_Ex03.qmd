---
title: "Take-Home_EX03"
author: "Teo Wee Siang Roy"
date: "June 11, 2025"
date-modified: "last-modified"
format:
  html:
    toc: true
    theme: default
    code-fold: show

editor: visual
execute: 
  eval: true
  echo: true
  warning: false
freeze: true
---

# Take-Home Exercise 3

Replicate Take home 2 with teammates's package and Data Cleaning/Wrangling.\
Cluster Analysis will be the Main part of Take Home Exercise 3

# Set-up

## Import library package

```{r}
pacman::p_load(tidyverse, jsonlite, lubridate, ggraph, tidygraph, visNetwork, igraph, patchwork)

```

## Import data and extract nodes and edges

```{r}

# Load graph structure
MC3 <- fromJSON("TH03/data/MC3_graph.json")
MC3_schema <- fromJSON("TH03/data/MC3_schema.json")

mc3_nodes <- as_tibble(MC3$nodes)
mc3_edges <- as_tibble(MC3$edges)

```

```{r}
glimpse(MC3)
```

## Clean and Wrangling nodes

```{r}
mc3_nodes_cleaned <- mc3_nodes %>%
  mutate(id = as.character(id)) %>%
  filter(!is.na(id)) %>%
  distinct(id, .keep_all = TRUE) %>%
  select(-thing_collected)

mc3_edges_cleaned <- mc3_edges %>%
  rename(from_id = source, 
         to_id = target) %>%
  mutate(across(c(from_id, to_id), as.character)) %>%
  filter(from_id %in% mc3_nodes_cleaned$id, 
         to_id %in% mc3_nodes_cleaned$id) %>%
  filter(!is.na(from_id), !is.na(to_id))

node_index_lookup <- mc3_nodes_cleaned %>%
  mutate(.row_id = row_number()) %>%
  select(id, .row_id)

mc3_edges_indexed <- mc3_edges_cleaned %>%
  left_join(node_index_lookup, by = c("from_id" = "id")) %>%
  rename(from = .row_id) %>%
  left_join(node_index_lookup, by = c("to_id" = "id")) %>%
  rename(to = .row_id) %>%
  select(from, to, is_inferred, type) %>%
  filter(!is.na(from) & !is.na(to))

used_node_indices <- sort(unique(c(mc3_edges_indexed$from, mc3_edges_indexed$to)))

mc3_nodes_final <- mc3_nodes_cleaned %>%
  slice(used_node_indices) %>%
  mutate(new_index = row_number())

old_to_new_index <- tibble(
  old_index = used_node_indices,
  new_index = seq_along(used_node_indices)
)

mc3_edges_final <- mc3_edges_indexed %>%
  left_join(old_to_new_index, by = c("from" = "old_index")) %>%
  rename(from_new = new_index) %>%
  left_join(old_to_new_index, by = c("to" = "old_index")) %>%
  rename(to_new = new_index) %>%
  select(from = from_new, to = to_new, is_inferred, type)

```

## Entity Network Construction

```{r}
# Filter People and Vessels
entity_nodes <- mc3_nodes_final %>%
  filter(type == "Entity", sub_type %in% c("Person", "Vessel")) %>%
  select(id, name, sub_type)

# Assign groups
entity_nodes <- entity_nodes %>%
  mutate(
    group = case_when(
      name %in% c("Green Guardians", "Reef Guardian", "EcoVigil", "Sentinel") ~ "Environmentalism",
      name %in% c("Sailor Shift", "Sailor Shifts Team") ~ "Sailor Shift",
      name %in% c("Mariners Dream", "Marlin", "Recreational Fishing Boats") ~ "Fishing/Leisure",
      name %in% c("Serenity", "Horizon", "Osprey", "Remora", "Neptune", "Mako") ~ "Tourism/Leisure",
      name %in% c("Boss", "Mrs. Money", "The Middleman") ~ "Suspicious",
      TRUE ~ sub_type
    )
  )

# Build communication pairs
valid_ids <- entity_nodes$id
comm_event_ids <- mc3_nodes_final %>%
  filter(type == "Event", sub_type == "Communication") %>%
  pull(id)

edge_lookup <- tibble(
  index = mc3_nodes_final$new_index,
  id = mc3_nodes_final$id
)

mc3_edges_for_events <- mc3_edges_final %>%
  left_join(edge_lookup, by = c("from" = "index")) %>%
  rename(from_id = id) %>%
  left_join(edge_lookup, by = c("to" = "index")) %>%
  rename(to_id = id)

sent_edges <- mc3_edges_for_events %>%
  filter(type == "sent", to_id %in% comm_event_ids) %>%
  select(event_id = to_id, entity_id = from_id)

received_edges <- mc3_edges_for_events %>%
  filter(type == "received", from_id %in% comm_event_ids) %>%
  select(event_id = from_id, entity_id = to_id)

entity_event_edges <- bind_rows(sent_edges, received_edges)

entity_pairs <- entity_event_edges %>%
  inner_join(entity_event_edges, by = "event_id") %>%
  filter(entity_id.x != entity_id.y) %>%
  distinct(entity_id.x, entity_id.y) %>%
  rename(source = entity_id.x, target = entity_id.y) %>%
  filter(source %in% valid_ids & target %in% valid_ids)

# Build tidygraph
graph_tbl <- tbl_graph(nodes = entity_nodes, edges = entity_pairs, directed = FALSE)

```

# **Cluster Analysis**

```{r}
# Convert to igraph
graph_igraph <- as.igraph(graph_tbl)

# Run clustering algorithms
cluster_infomap <- cluster_infomap(graph_igraph)
cluster_louvain <- cluster_louvain(graph_igraph)
cluster_walktrap <- cluster_walktrap(graph_igraph, steps = 10)
cluster_edge_betweenness <- cluster_edge_betweenness(graph_igraph, directed = FALSE)

# Handle spinglass for disconnected components
if (!is_connected(graph_igraph)) {
  comp_info <- components(graph_igraph)
  largest_comp <- which.max(comp_info$csize)
  node_indices <- which(comp_info$membership == largest_comp)
  graph_connected <- induced_subgraph(graph_igraph, node_indices)
  cluster_spinglass <- cluster_spinglass(graph_connected)
  
  spinglass_vec <- rep(NA, vcount(graph_igraph))
  spinglass_vec[node_indices] <- membership(cluster_spinglass)
} else {
  cluster_spinglass <- cluster_spinglass(graph_igraph)
  spinglass_vec <- membership(cluster_spinglass)
}

# Add cluster assignments to entity_nodes
entity_nodes <- entity_nodes %>%
  mutate(
    infomap_cluster = as.factor(membership(cluster_infomap)),
    louvain_cluster = as.factor(membership(cluster_louvain)),
    walktrap_cluster = as.factor(membership(cluster_walktrap)),
    edge_betweenness_cluster = as.factor(membership(cluster_edge_betweenness)),
    spinglass_cluster = as.factor(spinglass_vec)
  )

```

```{r}
# Create performance metrics
cluster_metrics <- tibble(
  Algorithm = c("Infomap", "Louvain", "Walktrap", "Edge Betweenness", "Spinglass"),
  Clusters = c(
    length(unique(membership(cluster_infomap))),
    length(unique(membership(cluster_louvain))),
    length(unique(membership(cluster_walktrap))),
    length(unique(membership(cluster_edge_betweenness))),
    length(unique(membership(cluster_spinglass)))
  ),
  Modularity = c(
    modularity(cluster_infomap),
    modularity(cluster_louvain),
    modularity(cluster_walktrap),
    modularity(cluster_edge_betweenness),
    modularity(cluster_spinglass)
  )
)

# Split algorithms by performance
high_modularity <- cluster_metrics %>%
  filter(Modularity >= 0.3) %>%
  arrange(desc(Modularity))

low_modularity <- cluster_metrics %>%
  filter(Modularity < 0.3) %>%
  arrange(desc(Modularity))

print("High Performance Algorithms (Modularity >= 0.3):")
print(high_modularity)

print("Low Performance Algorithms (Modularity < 0.3):")
print(low_modularity)

```

## Prepare Visualisation data

```{r}
# Create edges for visualization
node_id_map <- graph_tbl %>% 
  activate(nodes) %>% 
  as_tibble() %>% 
  mutate(node_index = row_number()) %>% 
  select(node_index, id)

edges_vis <- graph_tbl %>%
  activate(edges) %>% 
  as_tibble() %>%
  left_join(node_id_map, by = c("from" = "node_index")) %>%
  rename(from_id = id) %>%
  left_join(node_id_map, by = c("to" = "node_index")) %>%
  rename(to_id = id) %>%
  select(from = from_id, to = to_id)

```

```{r}
# Create nodes for Louvain (Best Algorithm) - ASCENDING ORDER
nodes_vis_louvain <- entity_nodes %>%
  mutate(
    id = as.character(id),
    label = name,
    group = factor(louvain_cluster, levels = sort(as.numeric(unique(louvain_cluster)))),
    shape = ifelse(sub_type == "Person", "dot", "triangle"),
    title = paste0(
      "<div style='color:white;'>",
      "<b>", name, "</b><br>",
      "Type: ", sub_type, "<br>",
      "Louvain Cluster: ", louvain_cluster,
      "</div>"
    )
  ) %>%
  select(id, label, group, shape, title)

# Create nodes for Infomap (Comparison) - ASCENDING ORDER
nodes_vis_infomap <- entity_nodes %>%
  mutate(
    id = as.character(id),
    label = name,
    group = factor(infomap_cluster, levels = sort(as.numeric(unique(infomap_cluster)))), 
    shape = ifelse(sub_type == "Person", "dot", "triangle"),
    title = paste0(
      "<div style='color:white;'>",
      "<b>", name, "</b><br>",
      "Type: ", sub_type, "<br>",
      "Infomap Cluster: ", infomap_cluster,
      "</div>"
    )
  ) %>%
  select(id, label, group, shape, title)
print("🥇 Louvain Clustering - Best Performance (Modularity: 0.359)")
```

## Interactive Network Visualisation (Louvain vs Infomap)

-   **Louvain Algorithm:** Optimizes **modularity** using a greedy, hierarchical approach. Excellent for finding well-defined, balanced communities with clear boundaries.

-   **Infomap Algorithm:** Uses **information theory** and random walks to minimize description length of information flow. Better at detecting overlapping communities and information pathways.

## 

```{r}
# Louvain Interactive Network - ORDERED DROPDOWN

vis_louvain <- visNetwork(nodes_vis_louvain, edges_vis, width = "100%", height = "600px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visNodes(font = list(size = 16)) %>%
  visEdges(color = list(color = "rgba(150,150,150,0.3)")) %>%
  visInteraction(
    tooltipStyle = 'background-color: black; color: white; border-radius: 5px; padding: 8px;'
  ) %>%
  visOptions(
    highlightNearest = TRUE, 
    selectedBy = list(variable = "group", main = "Select Cluster:", sort = TRUE)
  ) %>%
  visLegend(position = "right", main = "Louvain Clusters (Optimal)")

vis_louvain
```

```{r}
# Infomap Interactive Network - ORDERED DROPDOWN
print("📊 Infomap Clustering - High Granularity (13 clusters)")
vis_infomap <- visNetwork(nodes_vis_infomap, edges_vis, width = "100%", height = "600px") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visNodes(font = list(size = 16)) %>%
  visEdges(color = list(color = "rgba(150,150,150,0.3)")) %>%
  visInteraction(
    tooltipStyle = 'background-color: black; color: white; border-radius: 5px; padding: 8px;'
  ) %>%
  visOptions(
    highlightNearest = TRUE, 
    selectedBy = list(variable = "group", main = "Select Cluster:", sort = TRUE) 
  ) %>%
  visLegend(position = "right", main = "Infomap Clusters")

vis_infomap


```

## Algorithm Comparison visualisation

```{r, lenght = 10, width = 8}
# Clusters comparison
p1 <- ggplot(cluster_metrics, aes(x = reorder(Algorithm, Clusters), y = Clusters, fill = Algorithm)) +
  geom_col(alpha = 0.8) +
  geom_text(aes(label = Clusters), vjust = -0.5, size = 3, fontface = "bold") +
  labs(title = "Number of Clusters by Algorithm", 
       x = "Algorithm", y = "Number of Clusters") +
  theme_minimal() +
  theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set2")

# Modularity comparison
p2 <- ggplot(cluster_metrics, aes(x = reorder(Algorithm, -Modularity), y = Modularity, fill = Algorithm)) +
  geom_col(alpha = 0.8) +
  geom_text(aes(label = round(Modularity, 3)), vjust = -0.5, size = 3, fontface = "bold") +
  labs(title = "Modularity Score by Algorithm", 
       x = "Algorithm", y = "Modularity Score") +
  theme_minimal() +
  theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set2")

# Combined plot
print("📈 Algorithm Performance Comparison")
print(p1 + p2 + plot_layout(ncol = 2))


```

**Nemo Reef maritime investigation**:

-   **Louvain's 7 clusters** clearly separate legitimate operations (conservation, tourism) from suspicious activities (Boss-Mrs. Money network)

-   **Infomap's 15 clusters** might over-fragment, making it harder to identify major threat networks

-   **Comparison validates** that Louvain's groupings represent genuine operational boundaries, not algorithmic artifacts

## Interative performance

```{r}
# Create interactive performance table
cluster_comparison <- function() {
  performance_table <- cluster_metrics %>%
    arrange(desc(Modularity)) %>%
    mutate(
      Rank = row_number(),
      Modularity_Score = round(Modularity, 3),
      Efficiency = case_when(
        Modularity > 0.35 ~ "Excellent",
        Modularity > 0.25 ~ "Good", 
        TRUE ~ "Fair"
      )
    )
  
  DT::datatable(performance_table, 
                options = list(pageLength = 10, dom = 't'),
                caption = "🏆 Algorithm Performance Comparison") %>%
    DT::formatStyle("Efficiency",
      backgroundColor = DT::styleEqual(
        c("Excellent", "Good", "Fair"),
        c("#d4edda", "#fff3cd", "#f8d7da")
      ))
}

print("📋 Interactive Performance Analysis")
cluster_comparison()

```

**Performance Metrics:**

-   **Clusters:** Number of communities identified by each algorithm

-   **Modularity:** Quality score measuring how well the algorithm separates communities (higher = better)

-   **Rank:** Performance ranking based on modularity scores

-   **Efficiency:** Categorical assessment of algorithm effectiveness

## **Algorithm Rankings & Interpretation**

**🥇 1st Place: Louvain Algorithm**

-   **7 clusters, 0.359 modularity, "Excellent"**

-   **Optimal balance** between granularity and meaningful groupings

-   Clearly separates major stakeholder groups: conservation vessels, suspicious operations, tourism operators, city officials

-   **Best choice** for maritime security analysis

**🥈 2nd Place: Edge Betweenness**

-   **10 clusters, 0.342 modularity, "Good"**

-   Identifies bridge connections between groups effectively

-   More fragmented than Louvain but still valuable for understanding network bottlenecks

**🥉 3rd Place: Walktrap**

-   **7 clusters, 0.304 modularity, "Good"**

-   Same cluster count as Louvain but lower quality boundaries

-   Good for validating Louvain results through algorithmic consistency

**4th Place: Spinglass**

-   **4 clusters, 0.262 modularity, "Good"**

-   Broad groupings but may miss important sub-communities

-   Limited by network's disconnected components

**5th Place: Infomap**

-   **15 clusters, 0.149 modularity, "Fair"**

-   Over-fragmentation creates too many small groups

-   Difficult to interpret for practical maritime security purposes

## **Key Insights**

**Why Louvain Wins:**

-   **Highest modularity (0.359)** indicates strongest community structure detection

-   **Optimal 7 clusters** provide clear, actionable groupings for investigation

-   **Excellent efficiency** for identifying suspicious vs. legitimate operations

**Decision Support**
This comparison scientifically validates that Louvain clustering provides the most actionable intelligence for maritime authorities investigating potential illegal activities around Nemo Reef while maintaining clear separation between legitimate conservation efforts and suspicious operations.
