{
  "hash": "44db63a1a7a7ab44e49404dcf94db502",
  "result": {
    "markdown": "---\ntitle: \"In-Class Ex 05\"\nauthor: \"Teo Wee Siang Roy\"\ndate: \"May 17, 2025\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    toc: true\n    theme: default\n    code-fold: show\neditor: visual\nexecute:\n  eval: true\n  echo: true\n  warning: true\n  message: true\nfreeze: true\n---\n\n\n# In-Class Ex \n\n## Import package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite,\n               SmartEDA, tidygraph,\n               ggraph)\n```\n:::\n\n\n\n## Import data\n\n::: {.cell}\n\n```{.r .cell-code}\nkg <- fromJSON(\"data/MC1_graph.json\")\n```\n:::\n\n\n### Inspect data \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(kg, max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n:::\n:::\n\n### Extract and inspect\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <- as_tibble(kg$nodes)\nedges_tbl <- as_tibble(kg$links)\n```\n:::\n\n\n## Initial EDA \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = edges_tbl, aes(y = `Edge Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex05_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nodes_tbl, aes(y = `Node Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex05_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n## Create knowledge graph \n\n### Step 1 \n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- tibble(\n  id = nodes_tbl$id,\n  index = seq_len(nrow(nodes_tbl))\n)\n```\n:::\n\n\n### Step 2: Map source and target IDs to row indices \n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index)\n```\n:::\n\n### Step 3: Filter out any unmatched (invalid) edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  filter(!is.na(from), !is.na(to))\n```\n:::\n\n\n### Step 4 : Creating the graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(\n  nodes = nodes_tbl,\n  edges = edges_tbl,\n  directed = kg$directed\n)\n```\n:::\n\n\n## Visualising the knowledge graph (control the layout with the value)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n### visualising the whole graph\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), size = 4) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +\n  theme_void()\n```\n:::\n\n\n#### Step 1: Filter edges to only \"MemberOf\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph %>%\n  activate(edges) %>%\n  filter(`Edge Type` == \"MemberOf\")\n```\n:::\n\n\n\n#### Step 2: Extract only connected nodes \n(i.e.,used in these edges)\n\n::: {.cell}\n\n```{.r .cell-code}\nused_node_indices <- graph_memberof %>%\n  activate(edges) %>%\n  as_tibble() %>%\n  select(from, to) %>%\n  unlist() %>%\n  unique()\n```\n:::\n\n\n#### Step 3: Keep only these nodes\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph_memberof %>%\n  activate(nodes) %>%\n  mutate(row_id = row_number()) %>%\n  filter(row_id %in% used_node_indices) %>%\n  select(-row_id)  # optional cleanup\n```\n:::\n\n\n#### Plot the sub-graph\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: ggrepel: 789 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n```\n:::\n\n::: {.cell-output-display}\n![](In-Class_Ex05_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::",
    "supporting": [
      "In-Class_Ex05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}